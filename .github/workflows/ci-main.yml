name: CI/CD Pipeline - Main

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Install dependencies
        run: dotnet restore GERSEMI/GERSEMI.sln

      - name: Build
        run: dotnet build GERSEMI/GERSEMI.sln --no-restore --configuration Release

      - name: Run tests
        run: dotnet test GERSEMI/GERSEMI.sln --no-build --configuration Release --collect:"XPlat Code Coverage"

      - name: Publish Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: TestResults
          path: '**/TestResults/*.trx'

  build-and-push-docker-images:
    runs-on: ubuntu-latest
    needs: build-and-test
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push API image for main branch
        uses: docker/build-push-action@v3
        with:
          context: .
          file: GERSEMI/Presentation/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/gersemi-api:prod
          platforms: linux/arm64

      - name: Build and push Client image for main branch
        uses: docker/build-push-action@v3
        with:
          context: ./GERSEMI.Client
          file: GERSEMI.Client/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/gersemi-client:prod
          platforms: linux/arm64

  deploy-main:
    runs-on: ubuntu-latest
    needs: build-and-push-docker-images
    timeout-minutes: 120
    environment: Production
    env:
      DEPLOY_BRANCH: 'main'
      DOCKER_TAG: 'prod'
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      SA_PASSWORD: ${{ secrets.SA_PASSWORD }}
      RASPBERRY_HOST_IP: ${{ secrets.RASPBERRY_HOST_IP }}
      RASPBERRY_USERNAME: ${{ secrets.RASPBERRY_USERNAME }}
      RASPBERRY_SSH_KEY: ${{ secrets.RASPBERRY_SSH_KEY }}
      RASPBERRY_HOST_PORT: ${{ secrets.RASPBERRY_HOST_PORT }}

    steps:
      - name: Deploy to Raspberry Pi (Main)
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.RASPBERRY_HOST_IP }}
          username: ${{ env.RASPBERRY_USERNAME }}
          key: ${{ env.RASPBERRY_SSH_KEY }}
          port: ${{ env.RASPBERRY_HOST_PORT }}
          script: |
            echo "Starting deployment for branch: ${{ env.DEPLOY_BRANCH }}"
            echo "DOCKER_TAG set to: ${{ env.DOCKER_TAG }}"
            echo "DOCKERHUB_USERNAME set to: ${{ env.DOCKERHUB_USERNAME }}"
            echo "SA_PASSWORD is set."

            set -e
            cd ~/GERSEMI

            # Clean repository to avoid conflicts
            git reset --hard HEAD
            git clean -fd

            # Checkout the deployment branch
            git checkout ${{ env.DEPLOY_BRANCH }} || { echo "Failed to checkout branch ${{ env.DEPLOY_BRANCH }}"; exit 1; }

            # Pull the latest changes
            git fetch origin ${{ env.DEPLOY_BRANCH }}
            git merge --ff-only origin/${{ env.DEPLOY_BRANCH }} || {
              echo "Fast-forward failed. Resetting branch to origin/${{ env.DEPLOY_BRANCH }}"
              git reset --hard origin/${{ env.DEPLOY_BRANCH }}
            }

            # Debugging: Check git status and latest commit after pull
            echo "After pull:"
            git status
            git log -1

            # Export environment variables for Docker Compose
            export DOCKERHUB_USERNAME='${{ env.DOCKERHUB_USERNAME }}'
            export DOCKER_TAG='${{ env.DOCKER_TAG }}'
            export SA_PASSWORD='${{ env.SA_PASSWORD }}'

            # Navigate to Docker Compose directory
            cd ~/GERSEMI/GERSEMI

            # Stop and remove existing containers
            docker-compose down --remove-orphans

            # Pull the latest Docker images
            docker-compose pull

            # Rebuild and restart Docker containers
            docker-compose up -d --build
          timeout-minutes: 120
